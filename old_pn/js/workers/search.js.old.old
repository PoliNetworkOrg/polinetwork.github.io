/**
 *  Web Worker wrapping all the search logic of the website.
 *
 *  Four methods are available in this worker:
 *  - reload 	for reloading the dataset from the server
 *  - filter 	for searching a group based on a query
 *  - reduce	for compress a filter's result on a group's field.
 *  - get_info  retrives groups info (see {@link make_html})
 *  - make_html	generate a standard html from a dataset (helper function)
 *
 *  You can call a method by posting a message formatted as below:
 *	`
 *  {
 *		op_id: 		an opaque id associated with this call
 *		op_type: 	the name of the method to call
 *		data: 		data to pass to the method (see doc for each method)
 *  }
 *  `
 *
 *  Each method returns data by firing a message formatted as below:
 *  `
 *	{
 *		op_id: 		the same value passed in the request,
 *      op_type: 	the name of the method called (for example filter)
 *      data: 		see doc for each method
 *  }
 *  `
 *
 *  @package search
 *
 *  {@link reload}
 *  {@link filter}
 *  {@link reduce} 
 *  {@link get_info} 
 *  {@link make_html} 
 */

/**
 *	The index dataset for the worker. See {@link reload}.
 */
index_data = [];

/**
 *  The info dataset for this worker. See {@link reload}.
 */
info_data = {};

/**
 *  Post messages to this worker to call methods. 
 *  
 *  Pass an object formatted as below as data of the message:
 *	`
 *  {
 *		op_id: 		an opaque id associated with this call
 *		op_type: 	the name of the method to call
 *		data: 		data to pass to the method (see doc for each method)
 *  }
 *  `
 */
onmessage = function(e) {
	var data = e.data;

	switch (data.op_type){
		case "reload":

			data.data = reload(data.data);

			break;
		case "filter":

			data.data = filter(data.data);

			break;
		case "reduce":

			data.data = reduce(data.data);

			break;
		case "get_info":

			data.data = get_info(data.data);

			break;
		case "make_html":

			data.data = make_html(data.data);

			break;
		default:
			data = null;
	}

	if (data !== null){
		// Default on op_type switch
		postMessage(data);
	}
}

/**
 *	Search the dataset for a given query
 *
 *	@param 	query	The query to execute, as an object where each element name
 *					contains the field of the dataset to filter, and the 
 *					content the value to filter by
 *	@param 	join 	The type of join for query: AND or OR
 *	@param 	type 	The type of the return: HTML or ARRAY
 *	@param 	limit 	Max elements to return
 */
search = function(query, join, type, limit){
	// filtering data
	var result = [];

	

	result = result.map(_removeDuplicates);


}

/**
 *  Reload the dataset used in this worker.
 *
 *  You must call this function successfully at least once after starting this
 *  worker, otherwise functions likes {@link filter} may not work properly.
 *
 *  @param data Set to null
 *  @return `true` if dataset has been reloaded successfully, `false` on errors.
 */
reload = function(data){
	var xhttp = new XMLHttpRequest();

	xhttp.open('GET', '/data/groups.json', false);
	xhttp.send(null);

	if (xhttp.status === 200) {
		try {
			var tmp = JSON.parse(xhttp.responseText);

			if (
				(Array.isArray(tmp.index_data) === true) &&
				(typeof tmp.info_data === 'object')
			){
				index_data = tmp.index_data;
				info_data = tmp.info_data;
				return true;
			}
			else {
				return false;
			}
		}
		catch (e){
			return false;
		}
	}
	else {
		return false;
	}
}

/**
 *  Filters the dataset using the object passed as parameter. 
 *  
 *  Each field of the object is named as a field of each object of the dataset,
 *  and contains a regex which must match the same field of the object in the
 *  dataset.
 *
 *  Note: multiple fields are executed in AND.
 *
 *  @param data An object containing the query, as stated above
 *  @return An array of groups matching the query
 */
_filter = function(data){
	var toReturn;

	toReturn = index_data.filter((item) => {
		var ok = true;

		Object.keys(data).forEach((key) => {
			if (!(item[key].match(data[key]))){
				ok = false;
			}
		});

		return ok;
	});

	return toReturn;
}

/**
 *  Reduce a list of groups passed as parameter based on a field passed as 
 *  parameter, by removing duplicates of that field.
 *
 *  For example, if we have the dataset :
 *  `
 *	[
 *		{
 *			id: 1,
 *			cat: "a"
 *		},
 *		{
 *			id: 2,
 *			cat: "a"
 *		},
 *		{
 *			id: 3,
 *			cat: "b"
 *		},
 *		{
 *			id: 1,
 *			cat: "a"
 *		},
 * 	]
 *  `
 *  by reducing if for `cat` we get `["a", "b"]`, and by reducing it by id
 *  we get [1, 2, 3, 4].
 *
 *  @param data An object containing in `dataset` the dataset to reduce, and in 
 *              `field` the name of the field to reduce by. Note, the field must
 *				exist.
 *  @param data An object formatted as below:
 *  `
 *  {
 *		dataset: the dataset to reduce
 *		field: the name of the field to reduce by. Note, the field must exist.
 *	}
 *	`
 *
 * 	@return An array containing the result of the reduction, as explained above.
 */
_reduce = function(data){
	var tmp = [];

	tmp = data.dataset.map(item => item[data.field]);

	tmp.sort();

	if (tmp.length > 1){
		tmp = tmp.reduce((item, list) => {
			if (list[0] !== item){
				list.unshift(item);
			}
		}, [tmp[0]]);
	}

	return tmp;
}

/**
 *  Retrives groups info from a dataset generated by {@link filter}.
 *  Duplicates are automatically removed.
 *
 *  @param data A dataset returned by {@link filter}
 *	@return A dataset ready for {@link make_html}
 *
 *  @see make_html  
 */
_get_info = function(data){
	var toReturn = [];

	reduce({
		dataset: data,
		field: "id"
	})
	.forEach((id) => {
		if (info_data[id]){
			toReturn.push(info_data[id]);
		}
	});

	return toReturn;
}

/**
 *  Generates and returns an HTML code string containing a dataset passed as 
 *  parameter. The HTML can then be inserted in a div using `.innerHTML`.
 *
 *  @param data An object formatted as below:
 *  `
 *  {
 *		dataset: Contains the dataset to convert, as returned by get_info,
 *		classes: {
 *			wrapper: Class to assign to the wrapper of all data
 *			group: 	 Class to assign to each group's div
 * 			image: 	 Class to assign to each group's image
 * 			info: 	 Class to assign to the info wrapper (title + desc)
 * 			title: 	 Class to assigno to each group's title
 * 			desc: 	 Class to assigno to each group's description
 * 		} 
 *	}
 *	`
 *	@return A string containing the generated HTML code
 */
_make_html = function(data){
	var classes = data.classes;

	var toReturn = '<div class="' + classes.wrapper + '">';

	data.dataset((item) => {
		toReturn += '\
			<a href="' + item.link + '" class="' + classes.group + '">\
				<img src="' + item.image + '" class="' + classes.image + '" />\
				<div class="' + classes.info + '">\
					<div class="' + classes.title + '">\
						' + item.title + '\
					</div>\
					<div class="' + classes.desc + '">\
						' + item.desc + '\
					</div>\
				</div>\
			</a>\
		';
	});

	var toReturn = '</div>';
}